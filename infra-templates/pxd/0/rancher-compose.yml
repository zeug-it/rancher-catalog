.catalog:
  name: "Portworx"
  version: "edge"
  description: "Portworx Docker Volume Plugin"
  questions:
    - variable: "ETCD_SERVICE_LB"
      label: "Etcd"
      description: Service link to Etcd Loadbalancer. This will be mapped to the container as 'etcd'
      type: "service"
      required: true
    - variable: "ETCD_SERVICE_SERVERS"
      label: "Etcd"
      description: Service link to Etcd Servers. This will be mapped to the container as 'etcd_s'
      type: "service"
      required: true
    - variable: SCALE
      description: Desired cluster size. Number of cluster nodes are good choices.
      label: Number of Nodes
      required: true
      default: 3
      type: int
    - variable: "VOLUME_DRIVER_NAME"
      description: "Name to use for this plugin instance with Docker:  docker volume create -d <volume driver name>"
      label: "Volume Driver Name"
      required: true
      default: "pxd"
      type: "string"
    - variable: "CLUSTER_ID"
      description: "Arbitrary Cluster ID, common to all nodes in PX cluster "
      label: "Cluster ID"
      type: "string"
      required: true
      default: ""
    - variable: "KVDB"
      description: "Key-value database, accessibe to all nodes in PX cluster (Ex: 'etcd://10.0.0.42:4001')"
      label: "Key-Value Database"
      type: "string"
      required: true
      default: ""
    - variable: "USE_DISKS"
      description: "Cmdline args for disks to use. Ex: '-a' for all available, or '-s /dev/sdX' for each individual disk"
      label: "Use Disks"
      type: "string"
      required: true
      default: "-s /dev/xvdb"
    - variable: "HEADER_DIR"
      description: "Directory where kernel headers can be found.  Default is '/usr/src'.  For CoreOS use '/lib/modules'"
      label: "Headers Directory"
      type: "string"
      required: true
      default: "/usr/src"
    - variable: SC_LABEL_VALUE
      label: Scheduler Host Label
      description: |
        Enter a name=value pair of any required host label you may want in order to bind your services to.
      type: string
pxd:
  labels:
    io.rancher.container.dns: 'true'
    io.rancher.container.hostname_override: container_name
    io.rancher.scheduler.affinity:container_label_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}
    io.rancher.container.pull_image: always
  metadata:
    version: 1
    storageDriverName: "${VOLUME_DRIVE_NAME}"
    debug: true
    volumeDriverName: "${VOLUME_DRIVER_NAME}"
  storage_driver:
    name: "${VOLUME_DRIVER_NAME}"
    scope: environment
    volume_access_mode: multiHostRW
    blockDevicePath: null
  scale: ${SCALE}
  start_on_create: true